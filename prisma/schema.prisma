generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  gender        String?
  phone         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime  @default(now())
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  addresses     Address[]
  cart          Cart?
  order         Order[]
  sessions      Session[]
}

model GuestUser {
  id             String   @id @default(cuid())
  expirationDate DateTime
  cart           Cart?
}

model Account {
  id                String  @id @default(cuid())
  providerAccountId String
  userId            String
  expires_at        Int?
  provider          String
  session_state     String?
  type              String
  access_token      String?
  id_token          String?
  refresh_token     String?
  scope             String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  address_id      Int     @id @default(autoincrement())
  name            String
  phone           String?
  address         String
  district        String
  state           String
  pincode         String
  landmark        String?
  alternate_phone String?
  is_default      Boolean @default(true)
  is_deleted      Boolean @default(false)
  userId          String  @map("userId")
  locality        String
  user            User    @relation(fields: [userId], references: [id])
  order           Order[]

  @@index([userId], map: "user_id_index")
}

model Product {
  id               String      @id @default(cuid())
  slug             String
  title            String
  description      String
  categoryId       Int
  basePrice        Float
  offerPrice       Float
  stock            Int
  color            String?
  variantName      String?
  variantValues    String?
  createdAt        DateTime    @default(now())
  shortDescription String?
  purchases        Int         @default(0)
  keywords         String[]
  earnings         Float       @default(0)
  cartItems        CartItem[]
  images           Image[]
  orderItems       OrderItem[]
  category         Category    @relation(fields: [categoryId], references: [id])

  @@index([slug], map: "product_slug_index")
}

model Image {
  id            Int     @id @default(autoincrement())
  imagePublicId String
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, id])
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int?
  parent   Category?  @relation("Category", fields: [parentId], references: [id])
  Category Category[] @relation("Category")
  Product  Product[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  productId String
  quantity  Int
  cartId    Int
  color     String?
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      String?    @unique
  guestUserId String?    @unique
  guestUser   GuestUser? @relation(fields: [guestUserId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  cartItems   CartItem[]

  @@index([userId], map: "userId_index")
  @@index([guestUserId], map: "guestUserId_index")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  productId  String
  quantity   Int
  color      String?
  orderId    String
  basePrice  Float
  offerPrice Float
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "orderId_index")
  @@index([productId], map: "productId_index")
}

model Order {
  id               String      @id @unique
  orderDate        DateTime    @default(now())
  total            Float
  userId           String
  payment_verified Boolean     @default(false)
  status           String      @default("pending")
  addressId        Int
  packedDate       DateTime?
  address          Address     @relation(fields: [addressId], references: [address_id])
  user             User        @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]
  payment          Payment?
}

model Payment {
  id             Int    @id @default(autoincrement())
  rzr_order_id   String @unique
  rzr_payment_id String @unique
  orderId        String @unique
  amount         Float
  method         String
  via            String
  order          Order  @relation(fields: [orderId], references: [id])
}

model BestDeal {
  id          Int    @id @default(autoincrement())
  imageUrl    String
  title       String
  description String
  url         String
  price       Float
}

model HeroBanner {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  basePrice   Float
  offerPrice  Float
  url         String
  imageUrl    String
  imageUrlSm  String
}

model Admin {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  role     AdminRole @default(SUPERADMIN)
}

enum AdminRole {
  SUPERADMIN
  GUEST
  ADMIN
}
