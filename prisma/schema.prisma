// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  image         String?
  emailVerified DateTime?
  gender        String?
  phone         String?
  password      String?
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  address_id      Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @map("userId")
  name            String
  phone           String?
  address         String
  locality        String
  district        String
  state           String
  pincode         String
  landmark        String?
  alternate_phone String?
  is_default      Boolean @default(true)
  is_deleted      Boolean @default(false)

  @@index([userId], name: "user_id_index")
}

model Product {
  id               String     @id @default(cuid())
  slug             String
  title            String
  shortDescription String?
  description      String     @db.Text
  category         Category   @relation(fields: [categoryId], references: [id])
  categoryId       Int
  basePrice        Float
  offerPrice       Float
  stock            Int
  color            String? // "Matte black, Clay White" | "NULL"
  variantName      String? // "Size"
  variantValues    String? // "small, medium, large"
  createdAt        DateTime   @default(now())
  images           Image[]
  cartItems        CartItem[]

  @@index([slug], name: "product_slug_index")
}

model Image {
  id            Int     @id @default(autoincrement())
  imagePublicId String
  productId     String
  product       Product @relation(fields: [productId], references: [id])

  @@unique([productId, id])
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int?
  parent   Category?  @relation("Category", fields: [parentId], references: [id])
  Product  Product[]
  Category Category[] @relation("Category")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  productId String
  quantity  Int
  color     String?
  product   Product @relation(fields: [productId], references: [id])
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      String?    @unique
  guestUserId String?    @unique
  cartItems   CartItem[]
  user        User?      @relation(fields: [userId], references: [id])
  guestUser   GuestUser? @relation(fields: [guestUserId], references: [id])

  @@index([userId], name: "userId_index")
  @@index([guestUserId], name: "guestUserId_index")
}

model GuestUser {
  id             String   @id @default(cuid())
  expirationDate DateTime
  cart           Cart?
}
